#!/usr/bin/env node

/**
 * WCAG Color Contrast Checker Script
 * Validates all color combinations in the design system
 */

import { generateContrastReport, colorCombinations, getContrastRating } from "../src/lib/util/color-contrast"

console.log("\nüé® Premier Bio Labs - WCAG Color Contrast Report")
console.log("=" .repeat(60))

// Generate overall report
const report = generateContrastReport()

// Display summary
console.log("\nüìä Summary:")
console.log(`‚úÖ Passing: ${report.passing.length} combinations`)
console.log(`‚ö†Ô∏è  Warnings: ${report.warnings.length} combinations`)
console.log(`‚ùå Failing: ${report.failing.length} combinations`)

// Display detailed results
console.log("\nüìã Detailed Results:")
console.log("-".repeat(60))

// Group by status
if (report.passing.length > 0) {
  console.log("\n‚úÖ PASSING (AA or better):")
  report.passing.forEach(result => console.log(`  ${result}`))
}

if (report.warnings.length > 0) {
  console.log("\n‚ö†Ô∏è  WARNINGS (Large text only):")
  report.warnings.forEach(result => console.log(`  ${result}`))
}

if (report.failing.length > 0) {
  console.log("\n‚ùå FAILING (Below AA):")
  report.failing.forEach(result => console.log(`  ${result}`))
}

// Critical combinations to check
console.log("\nüîç Critical Combinations:")
console.log("-".repeat(60))

const criticalCombos = [
  { name: "Primary Text on White", key: "textPrimaryOnWhite" },
  { name: "Secondary Text on White", key: "textSecondaryOnWhite" },
  { name: "White on Primary", key: "whiteOnPrimary" },
  { name: "Primary on Secondary", key: "primaryOnSecondary" },
  { name: "White on Accent", key: "whiteOnAccent" },
]

criticalCombos.forEach(({ name, key }) => {
  const combo = colorCombinations[key as keyof typeof colorCombinations]
  const rating = getContrastRating(combo.ratio)
  const status = rating.passes.normalAA ? "‚úÖ" : rating.passes.largeAA ? "‚ö†Ô∏è" : "‚ùå"

  console.log(
    `${status} ${name}: ${combo.ratio.toFixed(2)}:1 (${rating.level})`
  )
})

// Recommendations
console.log("\nüí° Recommendations:")
console.log("-".repeat(60))

const recommendations: string[] = []

// Check specific problematic combinations
if (colorCombinations.textSecondaryOnWhite.ratio < 4.5) {
  recommendations.push(
    "‚Ä¢ Consider darkening secondary text (#666666) to at least #595959 for AA compliance"
  )
}

if (colorCombinations.secondaryOnWhite.ratio < 4.5) {
  recommendations.push(
    "‚Ä¢ Secondary color (#c6dcdf) should only be used for decorative elements, not text"
  )
}

if (colorCombinations.whiteOnAccent.ratio < 4.5) {
  recommendations.push(
    "‚Ä¢ Use darker text on accent backgrounds or darken the accent color"
  )
}

if (colorCombinations.accentOnWhite.ratio < 4.5) {
  recommendations.push(
    "‚Ä¢ Accent color (#ecb157) needs adjustment for text use - consider #B88B3E"
  )
}

if (recommendations.length > 0) {
  recommendations.forEach(rec => console.log(rec))
} else {
  console.log("‚ú® All critical combinations meet WCAG AA standards!")
}

// Footer
console.log("\n" + "=".repeat(60))
console.log("üìö WCAG Standards:")
console.log("  ‚Ä¢ AA Normal Text: 4.5:1 minimum")
console.log("  ‚Ä¢ AA Large Text (18px+): 3:1 minimum")
console.log("  ‚Ä¢ AAA Normal Text: 7:1 minimum")
console.log("  ‚Ä¢ AAA Large Text: 4.5:1 minimum")
console.log("\n‚ú® Report generated successfully!\n")

// Exit with appropriate code
const hasFailures = report.failing.length > 0
process.exit(hasFailures ? 1 : 0)